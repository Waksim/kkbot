import re
import logging
import asyncio
from typing import List, Tuple, Optional

from aiogram import Router, F
from aiogram.enums import ChatType, ParseMode
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile, InputMediaPhoto
from aiogram.utils.markdown import hbold, hcode

from apps.users.models import TelegramUser, Deck, UserActivity
from apps.cards.models import Card
from apps.bot.services.hoyolab import decode_deck_code
from apps.bot.services.deck_utils import calculate_resonances
from apps.bot.services.image_generator import create_deck_image
from apps.users.services import log_user_activity

router = Router(name="deck-codes-router")
DECK_CODE_REGEX = re.compile(r'([^.,\'\"\s\n\t\r]{68})')
MAX_CODES_PER_MESSAGE = 20  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞

HELP_TEXT_PRIVATE = (
    f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–æ–¥–∞–º–∏ <b>Genshin Impact TCG</b>.\n\n"
    f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥ –∫–æ–ª–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>EiFyxd4NFkHyyuENH5ECzGMNF7Eh0p0OChLB6J4PCgHS9TUQFFFC958RGrLhEsMXDZEB</code>), –∏ —è:\n"
    f"1. –†–∞—Å—à–∏—Ñ—Ä—É—é –µ–µ —Å–æ—Å—Ç–∞–≤.\n"
    f"2. –†–∞—Å—Å—á–∏—Ç–∞—é —ç–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑–æ–Ω–∞–Ω—Å—ã.\n"
    f"3. –°–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏ –ø—Ä–∏—à–ª—é –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ä—Ç–∞–º–∏.\n\n"
    f"–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ {MAX_CODES_PER_MESSAGE} –∫–æ–¥–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –∏—Ö –≤—Å–µ!"
)


async def get_cards_from_ids_with_duplicates(card_ids: List[int]) -> List[Card]:
    """
    –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Card –∏–∑ —Å–ø–∏—Å–∫–∞ ID, —Å–æ—Ö—Ä–∞–Ω—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã
    –∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
    """
    if not card_ids:
        return []

    unique_card_ids = set(card_ids)
    cards_qs = Card.objects.filter(
        card_id__in=unique_card_ids
    ).prefetch_related('tags')
    cards_map = {card.card_id: card async for card in cards_qs}

    result_cards = [cards_map[card_id] for card_id in card_ids if card_id in cards_map]

    return result_cards


async def get_or_create_deck(code: str, user: TelegramUser) -> Tuple[Optional[Deck], Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–¥—ã –≤ –ë–î (–∫—ç—à). –ï—Å–ª–∏ –Ω–µ—Ç - –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API,
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤ –Ω–∞—à–µ–π –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å Deck.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (Deck, None) –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏–ª–∏ (None, "—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ") –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ.
    """
    try:
        deck = await Deck.objects.aget(deck_code=code)
        return deck, None
    except Deck.DoesNotExist:
        pass

    decoded_deck, error_message = await decode_deck_code(code)
    if error_message:
        return None, error_message
    if not decoded_deck:
        return None, "API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–æ–¥–µ."

    all_api_ids = set(decoded_deck.character_ids) | set(decoded_deck.action_ids)
    cards_in_db_count = await Card.objects.filter(card_id__in=all_api_ids).acount()

    if cards_in_db_count != len(all_api_ids):
        found_ids = {c.card_id async for c in Card.objects.filter(card_id__in=all_api_ids)}
        missing_ids = all_api_ids - found_ids
        logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞—Ä—Ç—ã —Å ID: {missing_ids}")
        return None, f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ä—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ. ID: {missing_ids}"

    deck = await Deck.objects.acreate(
        deck_code=code,
        owner=user,
        character_card_ids=decoded_deck.character_ids,
        action_card_ids=decoded_deck.action_ids
    )
    return deck, None


async def process_message_with_codes(message: Message, text_to_parse: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–∞–º–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞.
    """
    user_data = message.from_user
    user, _ = await TelegramUser.objects.aupdate_or_create(
        user_id=user_data.id,
        defaults={
            'username': user_data.username,
            'first_name': user_data.first_name,
            'last_name': user_data.last_name,
        }
    )

    await log_user_activity(
        user,
        UserActivity.ActivityType.MESSAGE_RECEIVED,
        {'text': message.text or "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"}
    )

    deck_codes = DECK_CODE_REGEX.findall(text_to_parse)
    if not deck_codes:
        await log_user_activity(user, UserActivity.ActivityType.EMPTY_REQUEST, {'text': text_to_parse})
        if message.chat.type == ChatType.PRIVATE:
            await message.reply(HELP_TEXT_PRIVATE)
        else:
            await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã –∫–æ–ª–æ–¥ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    if len(deck_codes) > MAX_CODES_PER_MESSAGE:
        await message.reply(
            f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–¥–æ–≤ ({len(deck_codes)}). "
            f"–ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {MAX_CODES_PER_MESSAGE}."
        )
        deck_codes = deck_codes[:MAX_CODES_PER_MESSAGE]

    media_items: List[InputMediaPhoto] = []
    caption_lines: List[str] = []
    error_messages: List[str] = []

    processing_message = await message.reply(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(deck_codes)} –∫–æ–ª–æ–¥...")

    for index, code in enumerate(deck_codes):
        deck_obj, error_message = await get_or_create_deck(code, user)

        if error_message:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ —Å –∫–æ–¥–æ–º {hcode(code)}:\n   {error_message}"
            error_messages.append(error_text)
            await log_user_activity(
                user,
                UserActivity.ActivityType.INVALID_CODE,
                {'code': code, 'error': error_message}
            )
            continue
        if not deck_obj:
            error_text = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –∫–æ–¥–æ–º {hcode(code)}"
            error_messages.append(error_text)
            await log_user_activity(
                user,
                UserActivity.ActivityType.ERROR_OCCURRED,
                {'code': code, 'context': 'get_or_create_deck_returned_none'}
            )
            continue

        await log_user_activity(user, UserActivity.ActivityType.DECK_PROCESSED, {'code': code})

        character_cards = await get_cards_from_ids_with_duplicates(deck_obj.character_card_ids)
        action_cards = await get_cards_from_ids_with_duplicates(deck_obj.action_card_ids)

        resonances = calculate_resonances(character_cards)

        image_bytes = await asyncio.to_thread(
            create_deck_image, character_cards, action_cards, resonances
        )
        photo_file = BufferedInputFile(image_bytes.read(), filename=f"{code}.jpg")

        media_items.append(InputMediaPhoto(media=photo_file))

        unique_char_names = sorted(list(set(card.name for card in character_cards)))
        caption_chars = ", ".join([hbold(name) for name in unique_char_names])
        caption_lines.append(f"{index + 1}) {caption_chars} {hcode(code)}")

    await processing_message.delete()

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
    if media_items:
        final_caption = "\n\n".join(caption_lines)

        if len(media_items) == 1:
            await message.reply_photo(photo=media_items[0].media, caption=final_caption)
        else:
            media_items[0].caption = final_caption
            media_items[0].parse_mode = ParseMode.HTML

            for i in range(0, len(media_items), 10):
                chunk = media_items[i:i + 10]
                await message.reply_media_group(media=chunk)

    if error_messages:
        await message.reply("–í–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –æ—à–∏–±–∫–∏:\n\n" + "\n".join(error_messages))


@router.message(Command("kk", "–∫–∫", ignore_case=True), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def handle_deck_codes_group(message: Message, command: Command):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /kk –≤ –≥—Ä—É–ø–ø–∞—Ö.
    """
    text_to_parse = command.args
    if not text_to_parse:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥—ã –∫–æ–ª–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /kk.")
        return
    await process_message_with_codes(message, text_to_parse)


@router.message(F.chat.type == ChatType.PRIVATE, F.text)
async def handle_deck_codes_private(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–∞–º–∏ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö.
    """
    if not message.text:
        return
    await process_message_with_codes(message, message.text)